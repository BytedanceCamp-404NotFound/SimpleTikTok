// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/mysqlmanage.proto

package mysqlmanageserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MySQLManageServerClient is the client API for MySQLManageServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySQLManageServerClient interface {
	// 用户登陆校验
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	// 用户注册
	UserRigster(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	// 获得用户信息
	CheckUserInf(ctx context.Context, in *CheckUserInfRequest, opts ...grpc.CallOption) (*CheckUserInfResponse, error)
	// 是否关注
	CheckIsFollow(ctx context.Context, in *CheckIsFollowRequest, opts ...grpc.CallOption) (*CheckIsFollowResponse, error)
	// 是否点赞
	IsFavotite(ctx context.Context, in *IsFavotiteRequest, opts ...grpc.CallOption) (*IsFavotiteResponse, error)
	// 发布列表视频信息
	GetVideoList(ctx context.Context, in *GetVideoListRequest, opts ...grpc.CallOption) (*GetVideoListResponse, error)
	// 发布列表视频数量
	VideoNum(ctx context.Context, in *VideoNumRequest, opts ...grpc.CallOption) (*VideoNumResponse, error)
}

type mySQLManageServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMySQLManageServerClient(cc grpc.ClientConnInterface) MySQLManageServerClient {
	return &mySQLManageServerClient{cc}
}

func (c *mySQLManageServerClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) UserRigster(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/UserRigster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) CheckUserInf(ctx context.Context, in *CheckUserInfRequest, opts ...grpc.CallOption) (*CheckUserInfResponse, error) {
	out := new(CheckUserInfResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/CheckUserInf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) CheckIsFollow(ctx context.Context, in *CheckIsFollowRequest, opts ...grpc.CallOption) (*CheckIsFollowResponse, error) {
	out := new(CheckIsFollowResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/CheckIsFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) IsFavotite(ctx context.Context, in *IsFavotiteRequest, opts ...grpc.CallOption) (*IsFavotiteResponse, error) {
	out := new(IsFavotiteResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/IsFavotite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) GetVideoList(ctx context.Context, in *GetVideoListRequest, opts ...grpc.CallOption) (*GetVideoListResponse, error) {
	out := new(GetVideoListResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/GetVideoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySQLManageServerClient) VideoNum(ctx context.Context, in *VideoNumRequest, opts ...grpc.CallOption) (*VideoNumResponse, error) {
	out := new(VideoNumResponse)
	err := c.cc.Invoke(ctx, "/mysqlmanageserver.MySQLManageServer/VideoNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySQLManageServerServer is the server API for MySQLManageServer service.
// All implementations must embed UnimplementedMySQLManageServerServer
// for forward compatibility
type MySQLManageServerServer interface {
	// 用户登陆校验
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	// 用户注册
	UserRigster(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	// 获得用户信息
	CheckUserInf(context.Context, *CheckUserInfRequest) (*CheckUserInfResponse, error)
	// 是否关注
	CheckIsFollow(context.Context, *CheckIsFollowRequest) (*CheckIsFollowResponse, error)
	// 是否点赞
	IsFavotite(context.Context, *IsFavotiteRequest) (*IsFavotiteResponse, error)
	// 发布列表视频信息
	GetVideoList(context.Context, *GetVideoListRequest) (*GetVideoListResponse, error)
	// 发布列表视频数量
	VideoNum(context.Context, *VideoNumRequest) (*VideoNumResponse, error)
	mustEmbedUnimplementedMySQLManageServerServer()
}

// UnimplementedMySQLManageServerServer must be embedded to have forward compatible implementations.
type UnimplementedMySQLManageServerServer struct {
}

func (UnimplementedMySQLManageServerServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedMySQLManageServerServer) UserRigster(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRigster not implemented")
}
func (UnimplementedMySQLManageServerServer) CheckUserInf(context.Context, *CheckUserInfRequest) (*CheckUserInfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserInf not implemented")
}
func (UnimplementedMySQLManageServerServer) CheckIsFollow(context.Context, *CheckIsFollowRequest) (*CheckIsFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsFollow not implemented")
}
func (UnimplementedMySQLManageServerServer) IsFavotite(context.Context, *IsFavotiteRequest) (*IsFavotiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFavotite not implemented")
}
func (UnimplementedMySQLManageServerServer) GetVideoList(context.Context, *GetVideoListRequest) (*GetVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoList not implemented")
}
func (UnimplementedMySQLManageServerServer) VideoNum(context.Context, *VideoNumRequest) (*VideoNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoNum not implemented")
}
func (UnimplementedMySQLManageServerServer) mustEmbedUnimplementedMySQLManageServerServer() {}

// UnsafeMySQLManageServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySQLManageServerServer will
// result in compilation errors.
type UnsafeMySQLManageServerServer interface {
	mustEmbedUnimplementedMySQLManageServerServer()
}

func RegisterMySQLManageServerServer(s grpc.ServiceRegistrar, srv MySQLManageServerServer) {
	s.RegisterService(&MySQLManageServer_ServiceDesc, srv)
}

func _MySQLManageServer_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_UserRigster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).UserRigster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/UserRigster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).UserRigster(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_CheckUserInf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).CheckUserInf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/CheckUserInf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).CheckUserInf(ctx, req.(*CheckUserInfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_CheckIsFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).CheckIsFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/CheckIsFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).CheckIsFollow(ctx, req.(*CheckIsFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_IsFavotite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFavotiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).IsFavotite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/IsFavotite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).IsFavotite(ctx, req.(*IsFavotiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_GetVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).GetVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/GetVideoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).GetVideoList(ctx, req.(*GetVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySQLManageServer_VideoNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLManageServerServer).VideoNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysqlmanageserver.MySQLManageServer/VideoNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLManageServerServer).VideoNum(ctx, req.(*VideoNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MySQLManageServer_ServiceDesc is the grpc.ServiceDesc for MySQLManageServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySQLManageServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mysqlmanageserver.MySQLManageServer",
	HandlerType: (*MySQLManageServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _MySQLManageServer_UserLogin_Handler,
		},
		{
			MethodName: "UserRigster",
			Handler:    _MySQLManageServer_UserRigster_Handler,
		},
		{
			MethodName: "CheckUserInf",
			Handler:    _MySQLManageServer_CheckUserInf_Handler,
		},
		{
			MethodName: "CheckIsFollow",
			Handler:    _MySQLManageServer_CheckIsFollow_Handler,
		},
		{
			MethodName: "IsFavotite",
			Handler:    _MySQLManageServer_IsFavotite_Handler,
		},
		{
			MethodName: "GetVideoList",
			Handler:    _MySQLManageServer_GetVideoList_Handler,
		},
		{
			MethodName: "VideoNum",
			Handler:    _MySQLManageServer_VideoNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mysqlmanage.proto",
}
